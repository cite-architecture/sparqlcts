import edu.holycross.shot.sparqlcts.CtsGraph
import edu.holycross.shot.sparqlcts.CtsDefinitions

import edu.harvard.chs.cite.CtsUrn

String contentType = "text/xml"
response.setContentType(contentType)
response.setHeader( "Access-Control-Allow-Origin", "*")


boolean done = false

String getCapsReply() {
    String inv = "inventory.xml"
    if (request.getParameter("inv")) {
        inv = request.getParameter("inv")
    }

    try  {
        File invFile = new File("${request.getRealPath('/')}/invs/${inv}")
        // temporary kludge:  strip XML PIs, and hope they're isolated on
        // a single line ...
        String capsText = invFile.getText("UTF-8").replaceAll(/<[?].+[?]>/, '')
        return "<GetCapabilities xmlns='http://chs.harvard.edu/xmlns/cts' xmlns:cts='http://chs.harvard.edu/xmlns/cts'>\n<cts:request></cts:request>\n<cts:reply>\n${capsText}\n</cts:reply>\n</GetCapabilities>"

	//return "<debug>FILE ${invFile} had text of length ${capsText.size()}</debug>"

    } catch (Exception e) {
        return ("<error>Exception reading inventory file:  ${e}</error>")
    }

}


String req = request.getParameter("request")
String urnStr = request.getParameter("urn")
if (req == "GetCapabilities") {
  //println '<?xml-stylesheet type="text/xsl" href="xslt/gc.xsl"?>\n' + getCapsReply()
  println getCapsReply()
  done = true


} else  if (req == "GetVersion") {
  println "<version>@version@</version>"
  done = true
  
} else {
  // guarantee that URN parameter is syntactically valid
  try {
    CtsUrn urn = new CtsUrn(urnStr)
  } catch (Exception e) {
    println """<CTSError xmlns:cts="http:chs.harvard.edu/xmlns/cts" xmlns="http://chs.harvard.edu/xmlns/cts">\n"""
      def errorNum
      switch (e) {
      case 'java.lang.Exception: Bad URN syntax: #BADSYNTAX#':
      errorNum = 2
      println """<message>BAD URN SYNTAX: ${urnStr}</message>\n"""
      println """<code>${errorNum}</code>\n"""
      break

      case 'java.lang.Exception: Bad URN syntax: ##':
      errorNum = 1
      println """<message>INVALID REQUEST. Missing required parameter: 'urn'</message>\n"""
      println """<code>${errorNum}</code>\n"""
      break

      default:
      errorNum = 0
      break
      }
      println """</CTSError>\n"""
      done = true
    }
}

Integer context = 0
if (request.getParameter("context")) {
    String contextStr = request.getParameter("context")
    try {
        context = contextStr.toInteger()
    } catch (Exception e) {
        System.err.println "Value of context parameter must be an integer: ${contextStr}"
    }
}

if (!done) {
    CtsGraph ctsg = new CtsGraph("@tripleserver@")
    switch(req) {





      
    case "GetDescription":
    //println '<?xml-stylesheet type="text/xsl" href="xslt/gd.xsl"?>\n' + ctsg.getDescrReply(urnStr)
    println ctsg.getDescrReply(urnStr)
    break


    case "GetPassagePlus":
    //            println '<?xml-stylesheet type="text/xsl" href="xslt/gp.xsl"?>\n' + ctsg.getPassagePlusReply(urnStr, context)
    reply = ""
    try {
      reply = ctsg.getPassagePlusReply(urnStr, context)
    } catch (Exception e) {
      reply = """<?xml-model href="../rng/Error.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0" ?>\n"""
      reply += """<CTSError xmlns:cts="http:chs.harvard.edu/xmlns/cts" xmlns="http://chs.harvard.edu/xmlns/cts">\n"""
      reply += """<message>Invalid URN reference: ${urnStr}</message>\n"""
      reply += """<code>3</code>\n"""
      reply += """</CTSError>\n"""
      
    }
    println reply
    break


    

        case "GetPassage":
	//           println '<?xml-stylesheet type="text/xsl" href="xslt/gp.xsl"?>\n' + ctsg.getPassageReply(urnStr, context)
		reply = ""
		try {
				   println ctsg.getPassageReply(urnStr, context)
		} catch (Exception e) {
				reply = """<?xml-model href="../rng/Error.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0" ?>\n"""
				reply += """<CTSError xmlns:cts="http:chs.harvard.edu/xmlns/cts" xmlns="http://chs.harvard.edu/xmlns/cts">\n"""
				reply += """<message>Invalid URN reference: ${urnStr}</message>\n"""
				reply += """<code>3</code>\n"""
				reply += """</CTSError>\n"""
				
		}
		println reply
        break

        case "GetPrevNextUrn":
	//            println '<?xml-stylesheet type="text/xsl" href="xslt/gpn.xsl"?>\n' + ctsg.getPrevNextReply(urnStr)
		reply = ""
		try {
					reply = ctsg.getPrevNextReply(urnStr)
		} catch (Exception e) {
				reply = """<?xml-model href="../rng/Error.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0" ?>\n"""
				reply += """<CTSError xmlns:cts="http:chs.harvard.edu/xmlns/cts" xmlns="http://chs.harvard.edu/xmlns/cts">\n"""
				reply += """<message>Invalid URN reference: ${urnStr}</message>\n"""
				reply += """<code>3</code>\n"""
				reply += """</CTSError>\n"""
				
		}
		println reply
        break



        case "GetValidReff":
	//            print '<?xml-stylesheet type="text/xsl" href="xslt/gvr.xsl"?>\n' 
        String levelVal = request.getParameter("level")
        String reply = ""

		try {
				assert levelVal.toInteger() > 0
				
						try {
						   CtsUrn thisUrn = new CtsUrn(urnStr)
						   Integer maxDepth = ctsg.getLeafDepth(thisUrn)
						   if (maxDepth >= levelVal.toInteger()){
								   reply = ctsg.getGVRReply(urnStr, levelVal.toInteger())
						   } else {
								reply += """<CTSError xmlns:cts="http:chs.harvard.edu/xmlns/cts" xmlns="http://chs.harvard.edu/xmlns/cts">\n"""
								reply += """<message>Invalid value for level parameter: ${levelVal}. With urn ${urnStr} maximum level = ${maxDepth}.</message>\n"""
								reply += """<code>4</code>\n"""
								reply += """</CTSError>\n"""
						   }
						   
						} catch (Exception e) {
								reply += """<CTSError xmlns:cts="http:chs.harvard.edu/xmlns/cts" xmlns="http://chs.harvard.edu/xmlns/cts">\n"""
								reply += """<message>Invalid URN reference: ${urnStr}</message>\n"""
								reply += """<code>3</code>\n"""
								reply += """</CTSError>\n"""
						}

		} catch (Error d){
				reply += """<CTSError xmlns:cts="http:chs.harvard.edu/xmlns/cts" xmlns="http://chs.harvard.edu/xmlns/cts">\n"""
				reply += """<message>Invalid value for level parameter: ${levelVal}: must be &gt; 0</message>\n"""
				reply += """<code>4</code>\n"""
				reply += """</CTSError>\n"""
		}

        println reply
        break



	
        default :
        // break with "undefined request" excetpion
            println "<error>Unrecognized request: ${req}.  \n(Add properly name-spaced reply here.)</error>"
        break
    }
}



