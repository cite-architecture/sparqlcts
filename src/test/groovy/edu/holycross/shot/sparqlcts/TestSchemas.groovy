package edu.holycross.shot.sparqlcts 

import edu.harvard.chs.cite.CtsUrn

import javax.xml.XMLConstants
import javax.xml.transform.stream.StreamSource
import javax.xml.validation.SchemaFactory

import org.iso_relax.verifier.*;

import static org.junit.Assert.*
import org.junit.Test



/** 
* Test that replies generated by CtsGraph object validate against 
* CTS reply schemas.
*/
class TestSchemas extends GroovyTestCase {
    // use default fuseki settings to test
    def serverUrl = "http://localhost:3030/ds/"
    def ctsg =  new CtsGraph(serverUrl)


    String schemaBase = "testdata/schemas/cts"



    void testGetPassageReply() {
        System.setProperty(
                           "javax.xml.validation.SchemaFactory:"+XMLConstants.RELAXNG_NS_URI, 
                           "com.thaiopensource.relaxng.jaxp.XMLSyntaxSchemaFactory")
        def factory = SchemaFactory.newInstance(XMLConstants.RELAXNG_NS_URI)

        CtsUrn urn = new CtsUrn("urn:cts:greekLit:tlg0012.tlg001.fuPers:1.1")
        def gp =  ctsg.getPassageReply(urn, 0)

        File schemaFile = new File("${schemaBase}/GetPassage.rng")
        def schema = factory.newSchema(schemaFile)
        def validator = schema.newValidator()
        validator.validate(new StreamSource(new StringReader(gp)))
    }


    void testGetPassagePlusReply() {
        System.setProperty(
                           "javax.xml.validation.SchemaFactory:"+XMLConstants.RELAXNG_NS_URI, 
                           "com.thaiopensource.relaxng.jaxp.XMLSyntaxSchemaFactory")
        def factory = SchemaFactory.newInstance(XMLConstants.RELAXNG_NS_URI)

        CtsUrn urn = new CtsUrn("urn:cts:greekLit:tlg0012.tlg001.fuPers:1.1")
        def gpp =  ctsg.getPassagePlusReply(urn, 0)

        File schemaFile = new File("${schemaBase}/GetPassagePlus.rng")
        def schema = factory.newSchema(schemaFile)
        def validator = schema.newValidator()
//        validator.validate(new StreamSource(new StringReader(gpp)))
System.err.println "FAILING GPP: " + gpp
    }


    void testGetPNReply() {
        System.setProperty(
                           "javax.xml.validation.SchemaFactory:"+XMLConstants.RELAXNG_NS_URI, 
                           "com.thaiopensource.relaxng.jaxp.XMLSyntaxSchemaFactory")
        def factory = SchemaFactory.newInstance(XMLConstants.RELAXNG_NS_URI)

        CtsUrn urn = new CtsUrn("urn:cts:greekLit:tlg0012.tlg001.fuPers:1.1")
        def gpn =  ctsg.getPrevNextReply(urn)

        File schemaFile = new File("${schemaBase}/GetPrevNext.rng")
        def schema = factory.newSchema(schemaFile)
        def validator = schema.newValidator()
        validator.validate(new StreamSource(new StringReader(gpn)))
    }

    void testGetDescrReply() {
        System.setProperty(
                           "javax.xml.validation.SchemaFactory:"+XMLConstants.RELAXNG_NS_URI, 
                           "com.thaiopensource.relaxng.jaxp.XMLSyntaxSchemaFactory")
        def factory = SchemaFactory.newInstance(XMLConstants.RELAXNG_NS_URI)

        CtsUrn urn = new CtsUrn("urn:cts:greekLit:tlg0012.tlg001.fuPers:1.1")
        def gd =  ctsg.getDescrReply(urn)

        File schemaFile = new File("${schemaBase}/GetDescription.rng")
        def schema = factory.newSchema(schemaFile)
        def validator = schema.newValidator()
        validator.validate(new StreamSource(new StringReader(gd)))
    }


    void testGVRReply() {
        System.setProperty(
                           "javax.xml.validation.SchemaFactory:"+XMLConstants.RELAXNG_NS_URI, 
                           "com.thaiopensource.relaxng.jaxp.XMLSyntaxSchemaFactory")
        def factory = SchemaFactory.newInstance(XMLConstants.RELAXNG_NS_URI)

        CtsUrn urn = new CtsUrn("urn:cts:greekLit:tlg0012.tlg001.fuPers:1.1")
        def gvr =  ctsg.getGVRReply(urn)
System.err.println "GVR " + gvr
        File schemaFile = new File("${schemaBase}/GetValidReff.rng")
        def schema = factory.newSchema(schemaFile)
        def validator = schema.newValidator()
        validator.validate(new StreamSource(new StringReader(gvr)))
    }

}
