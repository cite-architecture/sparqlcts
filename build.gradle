import org.apache.tools.ant.filters.ReplaceTokens
import com.github.rjeschke.txtmark.*


apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'groovy'
apply plugin: 'maven'


apply from: "versions.gradle"

if (hasProperty('pub')) {
    System.err.print "Using configuration data from ${pub}"
    File confFile = new File(pub)
    if (! confFile.exists()) {
        throw new Exception("No publication configuration file ${pub} found.")
    } else {
        apply from: pub
    }

} else {
    File confFile = new File("pub.gradle")
    if (! confFile.exists()) {
        throw new Exception("No publication configuration file ${confFile} found\
.")
    } else {
        println "Using default configuration in 'pub.gradle'"
        apply from: "pub.gradle"
    }
}

if (hasProperty('conf')) {
    System.err.print "Using configuration data from ${conf}"
    File confFile = new File(conf)
    if (! confFile.exists()) {
        throw new Exception("No publication configuration file ${conf} found.")
    } else {
        apply from: conf
    }

} else {
    File confFile = new File("conf.gradle")
    if (! confFile.exists()) {
        throw new Exception("No publication configuration file ${confFile} found\
.")
    } else {
        println "Using default configuration in 'conf.gradle'"
        apply from: "conf.gradle"
    }
}

group = "edu.holycross.shot"
version = "0.9.8"

buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath group: 'com.github.rjeschke', name: 'txtmark', version: '0.11'
  }
}





repositories {
    mavenCentral()

    // for cite libs:
    maven {
        url "http://beta.hpcc.uh.edu/nexus/content/repositories/releases"
    }
    // for IBM Normalizer
    maven {
        url "https://oss.sonatype.org/content/repositories/releases"
    }
}

configurations {
    schemas {
        description = 'Manage schemas'
        transitive = true
    }
    publib
}

dependencies {
    compile group: 'commons-io', name: 'commons-io', version: commonsioVersion

    compile ("log4j:log4j:${log4jVersion}") {
	exclude group: "com.sun.jdmk", module: "jmxtools"
        exclude group: "com.sun.jmx", module: "jmxri"
	exclude group: "javax.mail", module: "mail"
        exclude group: "javax.jms", module: "jms"
    }

    compile group: "org.codehaus.groovy", name : "groovy-all", version : groovyVersion
    runtime group: "org.codehaus.groovy", name : "groovy-all", version : groovyVersion

    compile group: 'edu.harvard.chs', name : 'cite' , version: citeVersion
    runtime group: 'edu.harvard.chs', name : 'cite' , version: citeVersion


    compile group: 'com.thaiopensource', name:'jing', version: '20091111'
    //runtime group: 'com.thaiopensource', name:'jing', version: '20091111'


    //testCompile group: 'junit', name: 'junit', version: junitVersion
    testCompile 'junit:junit:4.11'
    testCompile 'org.concordion:concordion:1.4.4'
    
    testCompile group :'xmlunit', name: 'xmlunit', version: xmlunitVersion
    testCompile group: 'com.ibm.icu', name: 'icu4j', version: icu4jVersion

    schemas group: 'edu.harvard.chs', name: 'cite', version: citeVersion, classifier: 'schemas', ext: 'zip'
}



stopPort = 9451
stopKey = 'foo'

if (hasProperty('jettyPort')) {
  System.err.print "Using httpPort configuration as ${jettyPort}\n"
  httpPort = jettyPort.toInteger()
} else {
  httpPort = 8888
}

task copyInventory(type: Copy) {
  from "${inventoryDir}"
  into "${buildDir}/tmp/jettyRunWar/webapp/invs/"
  doLast {
    println ""
    println "Copied inventories from ${inventoryDir} to  build location ${buildDir}/tmp/jettyRunWar/webapp/invs"
    println ""
  }

}

task copyBuildPkg(type: Copy) {
    from "pkg"
    into "${buildDir}/sparqlcts-template"
    filter(ReplaceTokens, tokens: [sparqlctsVersion : version])
}

task copyWeb(type: Copy) {
    from "src/main/webapp"
    into "${buildDir}/sparqlcts-template/src/main/webapp"
}


task buildTemplate(type: Zip, dependsOn: [copyBuildPkg, copyWeb] ) {
    classifier = "template"
    from "${buildDir}/sparqlcts-template"
}



war {
  filter(ReplaceTokens, tokens: [tripleserver: tripleserver, version: version])
}

war.dependsOn  copyInventory

uploadArchives {
  repositories.mavenDeployer {
        repository(url: nexusRepo) {                   
            authentication (userName: nexusUser, password: nexusPassword)
        }
    }
}


task cpTestSchemas (type: Copy) {
    configurations.schemas.filter { it.toString().endsWith(".zip") }.each{
        from zipTree(it)
    }
    into "testdata/schemas"
}

test.dependsOn cpTestSchemas

artifacts {
    publib jar
}


uploadPublib {
  repositories.mavenDeployer {
        repository(url: nexusRepo) {                   
            authentication (userName: nexusUser, password: nexusPassword)
        }
    }
}




sourceSets {
    main {
        java {
            srcDir 'src'
        }
        resources {
            srcDir 'src'
        }
    }
    test {
        java {
	  srcDir "specs/java"
        }
        resources {
	  srcDir "${buildDir}/specs"
        }
    }
}


task cpResources(type: Copy) {
  from "specs/resources"
  into "${buildDir}/specs"
}

task setUpResources(dependsOn: cpResources) {
}
setUpResources.doLast {
  FileTree tree = fileTree(mdSrc) {
    include "**/*.md"
  }
  tree.visit { f ->
    if (f.relativePath.isFile()) {
      File inFile = new File("${mdSrc}/${f.relativePath}")
      println "Need to work on " + inFile
      def segs = f.relativePath.getSegments()
      String treePath = "${buildDir}/specs"
      Integer limit =  segs.size() - 1
      segs.eachWithIndex { s, i ->
	if (i < limit) {
	  treePath = "${treePath}/${s}"
	  File nxtDir = new File(treePath)
	  if (! nxtDir.exists()) {
	    nxtDir.mkdir()
	  }
	}
      }
      File outDir = new File(treePath)
      String htmlFileName = f.relativePath.getLastName().replaceFirst(/.md$/,".html")
      File htmlFile = new File(outDir, htmlFileName)
      println "Created ${htmlFile}"

      String body = Processor.process(inFile.getText("UTF-8"),Configuration.DEFAULT)
      htmlFile.setText("${htmlPreface}${body}${htmlEnd}", "UTF-8")
    }
  }
}

test.dependsOn setUpResources

test {
    systemProperties 'concordion.output.dir': file("${buildDir}/concordion-results")
}

test.doFirst {
  println "About to run 'test' task"
}

task mapVersion() {
}
mapVersion.doLast {
  tokenMap["version"] = version
}

task conc(type: Copy, dependsOn: [test, mapVersion]) {
  from "${buildDir}/concordion-results"
  into "${buildDir}/concordion-formatted"
  filter(ReplaceTokens, tokens: tokenMap)
}
